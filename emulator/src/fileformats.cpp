// *******************************************************************************************************************************
// *******************************************************************************************************************************
//
//		Name:		fileformats.cpp
//		Purpose:	Load non-SREC file formats
//		Created:	12th March 2022
//		Author:		Paul Robson (paul@robsons.org.uk)
//
// *******************************************************************************************************************************
// *******************************************************************************************************************************

#include <includes.h>

// *******************************************************************************************************************************
//
// 												Format error
//
// *******************************************************************************************************************************

static void _FFMTError(const char *msg) {
	exit(fprintf(stderr,"File format : %s\n",msg));
}

// *******************************************************************************************************************************
//
// 											 Read byte or word
//
// *******************************************************************************************************************************

static int _FFMTRead(FILE *f,int size) {
	int d = 0;
	while (size -- > 0) {
		int c = fgetc(f);
		if (c < 0) return -1;
		d = (d << 8) | (c & 0xFF);
	}
	return d;
}

// *******************************************************************************************************************************
//
// 											Load PGX file
//
// *******************************************************************************************************************************

static void _FFMTLoadPGX(char *fileName) {
	char c1,c2,c3;
	int c,address;
	FILE *f = fopen(fileName,"rb");
	if (f == NULL) _FFMTError("Cannot open file");
//	printf("Loading %s\n",fileName);
	c1 = fgetc(f);c2 = fgetc(f);c3 = fgetc(f);
	if (c1 != 'P' || c2 != 'G' || c3 != 'X') _FFMTError("No PGX Header");
	c1 = fgetc(f);if (c1 != 0x02) _FFMTError("Bad PGX File type");
	address = _FFMTRead(f,4);
	CPUOverrideReset(address);
//	printf("Load to %x\n",address);
	while (c = fgetc(f),c >= 0) {
		m68k_write_memory_8(address++,c & 0xFF);
	}
	fclose(f);
}

// *******************************************************************************************************************************
//
// 											Load PGZ file
//
// *******************************************************************************************************************************

static void _FFMTLoadPGZ(char *fileName) {
	char c1;
	int address,size,wSize;
	FILE *f = fopen(fileName,"rb");
	if (f == NULL) _FFMTError("Cannot open file");
//	printf("Loading %s\n",fileName);
	c1 = fgetc(f);
	if (c1 != 'Z' && c1 != 'z') _FFMTError("Bad PGZ initial character");
	wSize = (c1 == 'Z') ? 3 : 4;
	while (address = _FFMTRead(f,wSize),address >= 0) {
		size = _FFMTRead(f,wSize);
		if (size == 0) CPUOverrideReset(address);
//		printf("Load to %x %d\n",address,size);
		for (int i = 0;i < size;i++) {
			m68k_write_memory_8(address++,fgetc(f) & 0xFF);
		}
	}
	fclose(f);
}

// *******************************************************************************************************************************
//
// 											Extract Hex from SREC
//
// *******************************************************************************************************************************

void FFMTLoad(char *fileName,int format) {
	if (format == FFMT_PGX) _FFMTLoadPGX(fileName);
	if (format == FFMT_PGZ) _FFMTLoadPGZ(fileName);
}

// *******************************************************************************************************************************
// *******************************************************************************************************************************
//
//		Changes made
//	
//		Date 			Changes
//		---- 			-------
//
// *******************************************************************************************************************************
// *******************************************************************************************************************************
